{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.htmlToDOM = exports.domToReact = exports.attributesToProps = exports.Text = exports.ProcessingInstruction = exports.Element = exports.Comment = void 0;\nvar html_dom_parser_1 = __importDefault(require(\"html-dom-parser\"));\nexports.htmlToDOM = html_dom_parser_1.default;\nvar attributes_to_props_1 = __importDefault(require(\"./attributes-to-props\"));\nexports.attributesToProps = attributes_to_props_1.default;\nvar dom_to_react_1 = __importDefault(require(\"./dom-to-react\"));\nexports.domToReact = dom_to_react_1.default;\nvar domhandler_1 = require(\"domhandler\");\nObject.defineProperty(exports, \"Comment\", {\n  enumerable: true,\n  get: function () {\n    return domhandler_1.Comment;\n  }\n});\nObject.defineProperty(exports, \"Element\", {\n  enumerable: true,\n  get: function () {\n    return domhandler_1.Element;\n  }\n});\nObject.defineProperty(exports, \"ProcessingInstruction\", {\n  enumerable: true,\n  get: function () {\n    return domhandler_1.ProcessingInstruction;\n  }\n});\nObject.defineProperty(exports, \"Text\", {\n  enumerable: true,\n  get: function () {\n    return domhandler_1.Text;\n  }\n});\nvar domParserOptions = {\n  lowerCaseAttributeNames: false\n};\n/**\r\n * Converts HTML string to React elements.\r\n *\r\n * @param html - HTML string.\r\n * @param options - Parser options.\r\n * @returns - React element(s), empty array, or string.\r\n */\nfunction HTMLReactParser(html, options) {\n  if (typeof html !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n  if (!html) {\n    return [];\n  }\n  return (0, dom_to_react_1.default)((0, html_dom_parser_1.default)(html, (options === null || options === void 0 ? void 0 : options.htmlparser2) || domParserOptions), options);\n}\nexports.default = HTMLReactParser;","map":{"version":3,"names":["html_dom_parser_1","__importDefault","require","exports","htmlToDOM","default","attributes_to_props_1","attributesToProps","dom_to_react_1","domToReact","domhandler_1","Object","defineProperty","enumerable","get","Comment","Element","ProcessingInstruction","Text","domParserOptions","lowerCaseAttributeNames","HTMLReactParser","html","options","TypeError","htmlparser2"],"sources":["D:\\GIT\\projects\\tppo\\karelian-front\\frontend\\node_modules\\html-react-parser\\src\\index.ts"],"sourcesContent":["import htmlToDOM from 'html-dom-parser';\r\n\r\nimport attributesToProps from './attributes-to-props';\r\nimport domToReact from './dom-to-react';\r\nimport type { HTMLReactParserOptions } from './types';\r\n\r\nexport { Comment, Element, ProcessingInstruction, Text } from 'domhandler';\r\nexport type { DOMNode } from 'html-dom-parser';\r\n\r\nexport type { HTMLReactParserOptions };\r\nexport { attributesToProps, domToReact, htmlToDOM };\r\n\r\nconst domParserOptions = { lowerCaseAttributeNames: false } as const;\r\n\r\n/**\r\n * Converts HTML string to React elements.\r\n *\r\n * @param html - HTML string.\r\n * @param options - Parser options.\r\n * @returns - React element(s), empty array, or string.\r\n */\r\nexport default function HTMLReactParser(\r\n  html: string,\r\n  options?: HTMLReactParserOptions,\r\n): ReturnType<typeof domToReact> {\r\n  if (typeof html !== 'string') {\r\n    throw new TypeError('First argument must be a string');\r\n  }\r\n\r\n  if (!html) {\r\n    return [];\r\n  }\r\n\r\n  return domToReact(\r\n    htmlToDOM(html, options?.htmlparser2 || domParserOptions),\r\n    options,\r\n  );\r\n}\r\n"],"mappings":";;;;;;;;;;;AAAA,IAAAA,iBAAA,GAAAC,eAAA,CAAAC,OAAA;AAUwCC,OAAA,CAAAC,SAAA,GAVjCJ,iBAAA,CAAAK,OAAS;AAEhB,IAAAC,qBAAA,GAAAL,eAAA,CAAAC,OAAA;AAQSC,OAAA,CAAAI,iBAAA,GARFD,qBAAA,CAAAD,OAAiB;AACxB,IAAAG,cAAA,GAAAP,eAAA,CAAAC,OAAA;AAO4BC,OAAA,CAAAM,UAAA,GAPrBD,cAAA,CAAAH,OAAU;AAGjB,IAAAK,YAAA,GAAAR,OAAA;AAASS,MAAA,CAAAC,cAAA,CAAAT,OAAA;EAAAU,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAAAJ,YAAA,CAAAK,OAAO;EAAA;AAAA;AAAEJ,MAAA,CAAAC,cAAA,CAAAT,OAAA;EAAAU,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAAAJ,YAAA,CAAAM,OAAO;EAAA;AAAA;AAAEL,MAAA,CAAAC,cAAA,CAAAT,OAAA;EAAAU,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAAAJ,YAAA,CAAAO,qBAAqB;EAAA;AAAA;AAAEN,MAAA,CAAAC,cAAA,CAAAT,OAAA;EAAAU,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAAAJ,YAAA,CAAAQ,IAAI;EAAA;AAAA;AAMtD,IAAMC,gBAAgB,GAAG;EAAEC,uBAAuB,EAAE;AAAK,CAAW;AAEpE;;;;;;;AAOA,SAAwBC,eAAeA,CACrCC,IAAY,EACZC,OAAgC;EAEhC,IAAI,OAAOD,IAAI,KAAK,QAAQ,EAAE;IAC5B,MAAM,IAAIE,SAAS,CAAC,iCAAiC,CAAC;EACxD;EAEA,IAAI,CAACF,IAAI,EAAE;IACT,OAAO,EAAE;EACX;EAEA,OAAO,IAAAd,cAAA,CAAAH,OAAU,EACf,IAAAL,iBAAA,CAAAK,OAAS,EAACiB,IAAI,EAAE,CAAAC,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEE,WAAW,KAAIN,gBAAgB,CAAC,EACzDI,OAAO,CACR;AACH;AAhBApB,OAAA,CAAAE,OAAA,GAAAgB,eAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}