{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatDOM = exports.formatAttributes = void 0;\nvar domhandler_1 = require(\"domhandler\");\nvar constants_1 = require(\"./constants\");\n/**\r\n * Gets case-sensitive tag name.\r\n *\r\n * @param tagName - Tag name in lowercase.\r\n * @returns - Case-sensitive tag name.\r\n */\nfunction getCaseSensitiveTagName(tagName) {\n  return constants_1.CASE_SENSITIVE_TAG_NAMES_MAP[tagName];\n}\n/**\r\n * Formats DOM attributes to a hash map.\r\n *\r\n * @param attributes - List of attributes.\r\n * @returns - Map of attribute name to value.\r\n */\nfunction formatAttributes(attributes) {\n  var map = {};\n  var index = 0;\n  var attributesLength = attributes.length;\n  // `NamedNodeMap` is array-like\n  for (; index < attributesLength; index++) {\n    var attribute = attributes[index];\n    map[attribute.name] = attribute.value;\n  }\n  return map;\n}\nexports.formatAttributes = formatAttributes;\n/**\r\n * Corrects the tag name if it is case-sensitive (SVG).\r\n * Otherwise, returns the lowercase tag name (HTML).\r\n *\r\n * @param tagName - Lowercase tag name.\r\n * @returns - Formatted tag name.\r\n */\nfunction formatTagName(tagName) {\n  tagName = tagName.toLowerCase();\n  var caseSensitiveTagName = getCaseSensitiveTagName(tagName);\n  if (caseSensitiveTagName) {\n    return caseSensitiveTagName;\n  }\n  return tagName;\n}\n/**\r\n * Transforms DOM nodes to `domhandler` nodes.\r\n *\r\n * @param nodes - DOM nodes.\r\n * @param parent - Parent node.\r\n * @param directive - Directive.\r\n * @returns - Nodes.\r\n */\nfunction formatDOM(nodes, parent, directive) {\n  if (parent === void 0) {\n    parent = null;\n  }\n  var domNodes = [];\n  var current;\n  var index = 0;\n  var nodesLength = nodes.length;\n  for (; index < nodesLength; index++) {\n    var node = nodes[index];\n    // set the node data given the type\n    switch (node.nodeType) {\n      case 1:\n        {\n          var tagName = formatTagName(node.nodeName);\n          // script, style, or tag\n          current = new domhandler_1.Element(tagName, formatAttributes(node.attributes));\n          current.children = formatDOM(\n          // template children are on content\n          tagName === 'template' ? node.content.childNodes : node.childNodes, current);\n          break;\n        }\n      case 3:\n        current = new domhandler_1.Text(node.nodeValue);\n        break;\n      case 8:\n        current = new domhandler_1.Comment(node.nodeValue);\n        break;\n      default:\n        continue;\n    }\n    // set previous node next\n    var prev = domNodes[index - 1] || null;\n    if (prev) {\n      prev.next = current;\n    }\n    // set properties for current node\n    current.parent = parent;\n    current.prev = prev;\n    current.next = null;\n    domNodes.push(current);\n  }\n  if (directive) {\n    current = new domhandler_1.ProcessingInstruction(directive.substring(0, directive.indexOf(' ')).toLowerCase(), directive);\n    current.next = domNodes[0] || null;\n    current.parent = parent;\n    domNodes.unshift(current);\n    if (domNodes[1]) {\n      domNodes[1].prev = domNodes[0];\n    }\n  }\n  return domNodes;\n}\nexports.formatDOM = formatDOM;","map":{"version":3,"names":["domhandler_1","require","constants_1","getCaseSensitiveTagName","tagName","CASE_SENSITIVE_TAG_NAMES_MAP","formatAttributes","attributes","map","index","attributesLength","length","attribute","name","value","exports","formatTagName","toLowerCase","caseSensitiveTagName","formatDOM","nodes","parent","directive","domNodes","current","nodesLength","node","nodeType","nodeName","Element","children","content","childNodes","Text","nodeValue","Comment","prev","next","push","ProcessingInstruction","substring","indexOf","unshift"],"sources":["D:\\GIT\\projects\\tppo\\karelian-front\\frontend\\node_modules\\html-dom-parser\\src\\client\\utilities.ts"],"sourcesContent":["import { Comment, Element, ProcessingInstruction, Text } from 'domhandler';\r\n\r\nimport { CASE_SENSITIVE_TAG_NAMES_MAP } from './constants';\r\nimport type { DOMNode } from '../types';\r\n\r\n/**\r\n * Gets case-sensitive tag name.\r\n *\r\n * @param tagName - Tag name in lowercase.\r\n * @returns - Case-sensitive tag name.\r\n */\r\nfunction getCaseSensitiveTagName(tagName: string): string | undefined {\r\n  return CASE_SENSITIVE_TAG_NAMES_MAP[tagName];\r\n}\r\n\r\n/**\r\n * Formats DOM attributes to a hash map.\r\n *\r\n * @param attributes - List of attributes.\r\n * @returns - Map of attribute name to value.\r\n */\r\nexport function formatAttributes(attributes: NamedNodeMap) {\r\n  const map: Record<string, string> = {};\r\n  let index = 0;\r\n  const attributesLength = attributes.length;\r\n\r\n  // `NamedNodeMap` is array-like\r\n  for (; index < attributesLength; index++) {\r\n    const attribute = attributes[index];\r\n    map[attribute.name] = attribute.value;\r\n  }\r\n\r\n  return map;\r\n}\r\n\r\n/**\r\n * Corrects the tag name if it is case-sensitive (SVG).\r\n * Otherwise, returns the lowercase tag name (HTML).\r\n *\r\n * @param tagName - Lowercase tag name.\r\n * @returns - Formatted tag name.\r\n */\r\nfunction formatTagName(tagName: string): string {\r\n  tagName = tagName.toLowerCase();\r\n  const caseSensitiveTagName = getCaseSensitiveTagName(tagName);\r\n\r\n  if (caseSensitiveTagName) {\r\n    return caseSensitiveTagName;\r\n  }\r\n\r\n  return tagName;\r\n}\r\n\r\n/**\r\n * Transforms DOM nodes to `domhandler` nodes.\r\n *\r\n * @param nodes - DOM nodes.\r\n * @param parent - Parent node.\r\n * @param directive - Directive.\r\n * @returns - Nodes.\r\n */\r\nexport function formatDOM(\r\n  nodes: NodeList,\r\n  parent: DOMNode | null = null,\r\n  directive?: string,\r\n): DOMNode[] {\r\n  const domNodes = [];\r\n  let current;\r\n  let index = 0;\r\n  const nodesLength = nodes.length;\r\n\r\n  for (; index < nodesLength; index++) {\r\n    const node = nodes[index];\r\n\r\n    // set the node data given the type\r\n    switch (node.nodeType) {\r\n      case 1: {\r\n        const tagName = formatTagName(node.nodeName);\r\n\r\n        // script, style, or tag\r\n        current = new Element(\r\n          tagName,\r\n          formatAttributes((node as HTMLElement).attributes),\r\n        );\r\n\r\n        current.children = formatDOM(\r\n          // template children are on content\r\n          tagName === 'template'\r\n            ? (node as HTMLTemplateElement).content.childNodes\r\n            : node.childNodes,\r\n          current,\r\n        );\r\n\r\n        break;\r\n      }\r\n\r\n      case 3:\r\n        current = new Text(node.nodeValue!);\r\n        break;\r\n\r\n      case 8:\r\n        current = new Comment(node.nodeValue!);\r\n        break;\r\n\r\n      default:\r\n        continue;\r\n    }\r\n\r\n    // set previous node next\r\n    const prev = domNodes[index - 1] || null;\r\n    if (prev) {\r\n      prev.next = current;\r\n    }\r\n\r\n    // set properties for current node\r\n    current.parent = parent as Element;\r\n    current.prev = prev;\r\n    current.next = null;\r\n\r\n    domNodes.push(current);\r\n  }\r\n\r\n  if (directive) {\r\n    current = new ProcessingInstruction(\r\n      directive.substring(0, directive.indexOf(' ')).toLowerCase(),\r\n      directive,\r\n    );\r\n\r\n    current.next = domNodes[0] || null;\r\n    current.parent = parent as Element;\r\n    domNodes.unshift(current);\r\n\r\n    if (domNodes[1]) {\r\n      domNodes[1].prev = domNodes[0];\r\n    }\r\n  }\r\n\r\n  return domNodes;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}