{"ast":null,"code":"var _jsxFileName = \"C:\\\\University\\\\Year 3\\\\Semester 2\\\\TPPO\\\\website\\\\frontend\\\\src\\\\ContentPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams, Link, useNavigate, useLocation } from 'react-router-dom';\nimport queryString from 'query-string';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ContentPage = () => {\n  _s();\n  const {\n    pathName\n  } = useParams();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [pathInfo, setPathInfo] = useState(null);\n  const [articles, setArticles] = useState([]);\n  const [files, setFiles] = useState([]);\n  const [subCategories, setSubCategories] = useState([]);\n  const [soldiers, setSoldiers] = useState([]);\n  const [totalNumberOfPages, setTotalNumberOfPages] = useState(0);\n  const {\n    page = 1,\n    letter\n  } = queryString.parse(location.search); // Correctly parse both page and letter from query\n\n  useEffect(() => {\n    fetchPathDetails(pathName);\n    fetchSubCategories(pathName);\n    if (pathName.includes('heroes')) {\n      if (letter) {\n        fetchSoldiersByLetter(letter);\n      } else {\n        fetchSoldiers(page);\n      }\n    }\n  }, [location.search]);\n  const fetchSoldiers = currentPage => {\n    fetch(`http://localhost:1337/heroes/${currentPage}`).then(response => response.json()).then(({\n      results,\n      totalPages\n    }) => {\n      setSoldiers(results); // Update to use 'results'\n      setTotalNumberOfPages(totalPages); // State variable to hold total pages\n    }).catch(error => console.error('Error fetching soldiers:', error));\n  };\n  const fetchSoldiersByLetter = currentLetter => {\n    fetch(`http://localhost:1337/soldiers/letter/${currentLetter}`).then(response => response.json()).then(data => setSoldiers(data)).catch(error => console.error('Error fetching soldiers:', error));\n  };\n  const fetchPathDetails = pathName => {\n    fetch(`http://localhost:1337/path-details/${pathName}`).then(response => response.json()).then(data => {\n      setPathInfo(data);\n      if (data && data.articles) {\n        setArticles(data.articles);\n      }\n      if (data && data.files) {\n        setFiles(data.files);\n      }\n    }).catch(error => console.error('Error fetching path details:', error));\n  };\n  const fetchSubCategories = pathName => {\n    fetch(`http://localhost:1337/subcategories/${pathName}`).then(response => response.json()).then(data => {\n      setSubCategories(data.map(category => ({\n        ...category,\n        link: `/site${category.link.replace(/^\\/|\\/$/g, '')}`\n      })));\n    }).catch(error => console.error('Error fetching subcategories:', error));\n  };\n\n  // Function to determine if special layout is needed\n  const isSpecialLayoutNeeded = () => {\n    // Assuming pathInfo.c_id is set correctly from fetchPathDetails\n    return pathInfo && (pathInfo.c_id === 45 || pathInfo.c_id === 11);\n  };\n  const changePage = newPage => {\n    // Construct the URL with both page and letter parameters if letter exists\n    const searchParams = letter ? `?page=${newPage}&letter=${letter}` : `?page=${newPage}`;\n    navigate(`/site/heroes${searchParams}`);\n  };\n  const renderPagination = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pagination\",\n      children: [...Array(totalNumberOfPages)].map((_, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => changePage(index + 1),\n        children: index + 1\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"generalPages\",\n    children: pathName.includes('heroes') && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u0413\\u0435\\u0440\\u043E\\u0438 \\u0421\\u043E\\u0432\\u0435\\u0442\\u0441\\u043A\\u043E\\u0433\\u043E \\u0421\\u043E\\u044E\\u0437\\u0430\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this), renderPagination(), \" \", /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: soldiers.map((soldier, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: soldier.a_title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s(ContentPage, \"PVsGWPCg9bZ4YXZjAYQJOC6l2y8=\", false, function () {\n  return [useParams, useNavigate, useLocation];\n});\n_c = ContentPage;\nexport default ContentPage;\nvar _c;\n$RefreshReg$(_c, \"ContentPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","Link","useNavigate","useLocation","queryString","jsxDEV","_jsxDEV","Fragment","_Fragment","ContentPage","_s","pathName","navigate","location","pathInfo","setPathInfo","articles","setArticles","files","setFiles","subCategories","setSubCategories","soldiers","setSoldiers","totalNumberOfPages","setTotalNumberOfPages","page","letter","parse","search","fetchPathDetails","fetchSubCategories","includes","fetchSoldiersByLetter","fetchSoldiers","currentPage","fetch","then","response","json","results","totalPages","catch","error","console","currentLetter","data","map","category","link","replace","isSpecialLayoutNeeded","c_id","changePage","newPage","searchParams","renderPagination","className","children","Array","_","index","onClick","fileName","_jsxFileName","lineNumber","columnNumber","soldier","a_title","_c","$RefreshReg$"],"sources":["C:/University/Year 3/Semester 2/TPPO/website/frontend/src/ContentPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useParams, Link, useNavigate, useLocation } from 'react-router-dom';\r\nimport queryString from 'query-string';\r\n\r\nconst ContentPage = () => {\r\n  const { pathName } = useParams();\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const [pathInfo, setPathInfo] = useState(null);\r\n  const [articles, setArticles] = useState([]);\r\n  const [files, setFiles] = useState([]);\r\n  const [subCategories, setSubCategories] = useState([]);\r\n  const [soldiers, setSoldiers] = useState([]);\r\n  const [totalNumberOfPages, setTotalNumberOfPages] = useState(0);\r\n\r\n\r\n  const { page = 1, letter } = queryString.parse(location.search); // Correctly parse both page and letter from query\r\n\r\n  useEffect(() => {\r\n    fetchPathDetails(pathName);\r\n    fetchSubCategories(pathName);\r\n    if (pathName.includes('heroes')) {\r\n      if (letter) {\r\n        fetchSoldiersByLetter(letter);\r\n      } else {\r\n        fetchSoldiers(page);\r\n      }\r\n    }\r\n  }, [location.search]);\r\n  const fetchSoldiers = (currentPage) => {\r\n    fetch(`http://localhost:1337/heroes/${currentPage}`)\r\n      .then(response => response.json())\r\n      .then(({ results, totalPages }) => {\r\n        setSoldiers(results); // Update to use 'results'\r\n        setTotalNumberOfPages(totalPages); // State variable to hold total pages\r\n      })\r\n      .catch(error => console.error('Error fetching soldiers:', error));\r\n  };\r\n  \r\n\r\n  const fetchSoldiersByLetter = (currentLetter) => {\r\n    fetch(`http://localhost:1337/soldiers/letter/${currentLetter}`)\r\n      .then(response => response.json())\r\n      .then(data => setSoldiers(data))\r\n      .catch(error => console.error('Error fetching soldiers:', error));\r\n  };\r\n\r\n  const fetchPathDetails = (pathName) => {\r\n    fetch(`http://localhost:1337/path-details/${pathName}`)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setPathInfo(data);\r\n        if (data && data.articles) {\r\n          setArticles(data.articles);\r\n        }\r\n        if (data && data.files) {\r\n          setFiles(data.files);\r\n        }\r\n      })\r\n      .catch(error => console.error('Error fetching path details:', error));\r\n  };\r\n\r\n  const fetchSubCategories = (pathName) => {\r\n    fetch(`http://localhost:1337/subcategories/${pathName}`)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setSubCategories(data.map(category => ({\r\n          ...category,\r\n          link: `/site${category.link.replace(/^\\/|\\/$/g, '')}`\r\n        })));\r\n      })\r\n      .catch(error => console.error('Error fetching subcategories:', error));\r\n  };\r\n\r\n  // Function to determine if special layout is needed\r\n  const isSpecialLayoutNeeded = () => {\r\n    // Assuming pathInfo.c_id is set correctly from fetchPathDetails\r\n    return pathInfo && (pathInfo.c_id === 45 || pathInfo.c_id === 11);\r\n  };\r\n\r\n\r\n  const changePage = (newPage) => {\r\n    // Construct the URL with both page and letter parameters if letter exists\r\n    const searchParams = letter ? `?page=${newPage}&letter=${letter}` : `?page=${newPage}`;\r\n    navigate(`/site/heroes${searchParams}`);\r\n  };\r\n\r\n  const renderPagination = () => {\r\n    return (\r\n      <div className=\"pagination\">\r\n        {[...Array(totalNumberOfPages)].map((_, index) => (\r\n          <button key={index} onClick={() => changePage(index + 1)}>\r\n            {index + 1}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  \r\n\r\n  return (\r\n    <div className=\"generalPages\">\r\n      {/* Your existing rendering logic for pathInfo and not heroes */}\r\n      {pathName.includes('heroes') && (\r\n        <>\r\n          <h2>Герои Советского Союза</h2>\r\n          {/* {renderAlphabetNavigation()} */}\r\n          {renderPagination()} {/* Call to renderPagination to show pagination */}\r\n          <ul>\r\n            {soldiers.map((soldier, index) => (\r\n              <li key={index}>\r\n                <h3>{soldier.a_title}</h3>\r\n                {/* Content rendering logic */}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default ContentPage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}