{"ast":null,"code":"var _jsxFileName = \"C:\\\\University\\\\Year 3\\\\Semester 2\\\\TPPO\\\\website\\\\frontend\\\\src\\\\ContentPageMultiple.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ContentPageMultiple = () => {\n  _s();\n  const {\n    param1,\n    param2\n  } = useParams();\n  const [categoryContent, setCategoryContent] = useState('');\n  useEffect(() => {\n    fetchCategoryContent(param1, param2);\n  }, [param1, param2]);\n  const fetchCategoryContent = (param1, letter) => {\n    // Construct URL with the letter parameter dynamically\n    const url = `http://localhost:1337/site/${param1}/${letter}`;\n    fetch(url).then(response => response.json()).then(data => {\n      // Assuming your API returns an array and you want to keep consistency with setSubCategories\n      // Adjust this based on the actual structure of your returned data\n      setCategoryContent(data); // Use the state updater function that matches your state definition\n    }).catch(error => console.error('Error fetching content:', error));\n  };\n\n  // Example of rendering multiple articles\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"generalPages\",\n    children: categoryContent && categoryContent.length > 0 ? categoryContent.map((content, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: content.a_title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        dangerouslySetInnerHTML: {\n          __html: content.a_text\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No content found for this letter.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 3\n  }, this);\n};\n_s(ContentPageMultiple, \"qp1XKcf50Ku5tdzS8sggq27jsZI=\", false, function () {\n  return [useParams];\n});\n_c = ContentPageMultiple;\nexport default ContentPageMultiple;\nvar _c;\n$RefreshReg$(_c, \"ContentPageMultiple\");","map":{"version":3,"names":["React","useState","useEffect","useParams","jsxDEV","_jsxDEV","ContentPageMultiple","_s","param1","param2","categoryContent","setCategoryContent","fetchCategoryContent","letter","url","fetch","then","response","json","data","catch","error","console","className","children","length","map","content","index","a_title","fileName","_jsxFileName","lineNumber","columnNumber","dangerouslySetInnerHTML","__html","a_text","_c","$RefreshReg$"],"sources":["C:/University/Year 3/Semester 2/TPPO/website/frontend/src/ContentPageMultiple.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst ContentPageMultiple = () => {\r\n  const { param1, param2 } = useParams();\r\n  const [categoryContent, setCategoryContent] = useState('');\r\n\r\n  useEffect(() => {\r\n    fetchCategoryContent(param1, param2);\r\n  }, [param1, param2]);\r\n\r\n  const fetchCategoryContent = (param1, letter) => {\r\n    // Construct URL with the letter parameter dynamically\r\n    const url = `http://localhost:1337/site/${param1}/${letter}`;\r\n  \r\n    fetch(url)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        // Assuming your API returns an array and you want to keep consistency with setSubCategories\r\n        // Adjust this based on the actual structure of your returned data\r\n        setCategoryContent(data); // Use the state updater function that matches your state definition\r\n      })\r\n      .catch(error => console.error('Error fetching content:', error));\r\n  };\r\n  \r\n\r\n  // Example of rendering multiple articles\r\nreturn (\r\n  <div className=\"generalPages\">\r\n    {categoryContent && categoryContent.length > 0 ? (\r\n      categoryContent.map((content, index) => (\r\n        <div key={index}>\r\n          <h3>{content.a_title}</h3>\r\n          <p dangerouslySetInnerHTML={{ __html: content.a_text }}></p>\r\n        </div>\r\n      ))\r\n    ) : (\r\n      <p>No content found for this letter.</p>\r\n    )}\r\n  </div>\r\n);\r\n\r\n};\r\n\r\nexport default ContentPageMultiple;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM;IAAEC,MAAM;IAAEC;EAAO,CAAC,GAAGN,SAAS,CAAC,CAAC;EACtC,MAAM,CAACO,eAAe,EAAEC,kBAAkB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAE1DC,SAAS,CAAC,MAAM;IACdU,oBAAoB,CAACJ,MAAM,EAAEC,MAAM,CAAC;EACtC,CAAC,EAAE,CAACD,MAAM,EAAEC,MAAM,CAAC,CAAC;EAEpB,MAAMG,oBAAoB,GAAGA,CAACJ,MAAM,EAAEK,MAAM,KAAK;IAC/C;IACA,MAAMC,GAAG,GAAI,8BAA6BN,MAAO,IAAGK,MAAO,EAAC;IAE5DE,KAAK,CAACD,GAAG,CAAC,CACPE,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAI;MACZ;MACA;MACAR,kBAAkB,CAACQ,IAAI,CAAC,CAAC,CAAC;IAC5B,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC,CAAC;EACpE,CAAC;;EAGD;EACF,oBACEhB,OAAA;IAAKkB,SAAS,EAAC,cAAc;IAAAC,QAAA,EAC1Bd,eAAe,IAAIA,eAAe,CAACe,MAAM,GAAG,CAAC,GAC5Cf,eAAe,CAACgB,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,kBACjCvB,OAAA;MAAAmB,QAAA,gBACEnB,OAAA;QAAAmB,QAAA,EAAKG,OAAO,CAACE;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAC1B5B,OAAA;QAAG6B,uBAAuB,EAAE;UAAEC,MAAM,EAAER,OAAO,CAACS;QAAO;MAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA,GAFpDL,KAAK;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGV,CACN,CAAC,gBAEF5B,OAAA;MAAAmB,QAAA,EAAG;IAAiC;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EACxC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAGR,CAAC;AAAC1B,EAAA,CAvCID,mBAAmB;EAAA,QACIH,SAAS;AAAA;AAAAkC,EAAA,GADhC/B,mBAAmB;AAyCzB,eAAeA,mBAAmB;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}